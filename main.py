import logging
from aiogram import Bot, Dispatcher, executor, types
import knopki as nav
import parser as pr
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
import sqlite as s
from sqlite import conn, cursor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

grpi = ['121', '122', '123', '124', '125', '126', '127', '21', '22', '211', '212', '213', '214', '215', '216', '11', '12', '301', '302', '303',
          '304', '305', '306', '1', '2', '491', '492', '493', '494', '495', '496']

# tokenb = os.getenv("TOKEN")
tokenb = ()
bot = Bot(token=tokenb)
dp = Dispatcher(bot, storage=MemoryStorage())
num = True

class UserState(StatesGroup):
    chgroup = State()
    strt = State()

@dp.message_handler(commands=['start'])
async def startcmd(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç')
    grn = message.text
    us_id = message.from_user.id
    username = message.from_user.username
    if s.getTrue(user_id=us_id) is True and s.getName(conn=conn, user_id=us_id) is None:
        await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        await UserState.chgroup.set()
    elif s.getTrue(user_id=us_id) is True and s.getName(conn=conn, user_id=us_id) is not None:
        await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n', reply_markup=nav.mainMenu)
    elif s.getTrue(user_id=us_id) is False:
        await message.answer(' –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        await UserState.strt.set()
@dp.message_handler(state=UserState.strt)
async def setgr(message: types.Message, state: FSMContext):
    await state.update_data(group=message.text)
    grn = message.text
    us_id = message.from_user.id
    username = message.from_user.username
    s.db_table_main(user_id=us_id, username=username)
    if grn in grpi:
        print(grn)
        s.db_table_ed(grp=grn, user_id=us_id)
        await message.answer('–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã ' + grn, reply_markup=nav.mainMenu)
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. \n' + '–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.')
        await UserState.chgroup.set()


@dp.message_handler(commands=['chgroup'])
async def change_group(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n')
    await UserState.chgroup.set()

@dp.message_handler(commands=['help'])
async def bot_messange(message: types.Message):
    await message.answer("üÜò", reply_markup=nav.helpMenu)

@dp.message_handler(commands=['cmd'])
async def bot_messange(message: types.Message):
    await message.answer("/start \n/chgroup \n/cmd \n/help")





@dp.message_handler()
async def bot_messange(messange: types.Message):
    global num
    us_id = messange.from_user.id
    print(s.getName(conn=conn, user_id=us_id))
    grnum = int(s.getName(conn=conn, user_id=us_id))
    if messange.text == '–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã':
        await bot.send_message(messange.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã', messange.text)
    elif messange.text == '–ó–∞–º–µ–Ω—ãüîÑ':
        await bot.send_message(messange.from_user.id, pr.zaminka(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == 'üìã':
        await bot.send_message(messange.from_user.id, '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –º—É—á–µ–Ω–∏–πüò©.', reply_markup=nav.otherMenu)
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '‚¨Ö':
        await bot.send_message(messange.from_user.id, '‚¨Ö', reply_markup=nav.mainMenu)
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == 'üîî':
        await bot.send_message(messange.from_user.id, pr.zvonki())
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        await bot.send_message(messange.from_user.id, pr.ponedelnik(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–í—Ç–æ—Ä–Ω–∏–∫':
        await bot.send_message(messange.from_user.id, pr.vtornik(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–°—Ä–µ–¥–∞':
        await bot.send_message(messange.from_user.id, pr.sreda(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–ß–µ—Ç–≤–µ—Ä–≥':
        await bot.send_message(messange.from_user.id, pr.chetverg(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–ü—è—Ç–Ω–∏—Ü–∞':
        await bot.send_message(messange.from_user.id, pr.pyatnica(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–°—É–±–±–æ—Ç–∞':
        await bot.send_message(messange.from_user.id, pr.sybbota(grnum))
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–ü–æ–º–æ—â—åüÜò':
        await bot.send_message(messange.from_user.id, 'üÜò', reply_markup=nav.helpMenu)
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–ö–æ–º–∞–Ω–¥—ã':
        await bot.send_message(messange.from_user.id, '/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞(–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞) \n/chgroup - –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É \n/cmd - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ \n/help - –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é "–ü–æ–º–æ—â—åüÜò"')
        await bot.delete_message(messange.from_user.id, messange.message_id)
    elif messange.text == '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã':
        await bot.send_message(messange.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n')
        await UserState.chgroup.set()
    elif messange.text == '–°–≤—è–∑—å':
        await bot.send_message(messange.from_user.id,'–°–≤—è–∑—å —Å –Ω–∞–º–∏:\n–ü–æ –ø–æ–≤–æ–¥—É —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏–¥–µ–π –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\n @Brat_satany'
                                                     '\n–ü–æ –ø–æ–≤–æ–¥—É —Ç–µ—Ö. –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –±–∞–≥–æ–≤ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\n @kuzzz0\n'
                                                     '(–≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º)\n'
                                                     '–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–π –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏.‚ù§')
        await bot.delete_message(messange.from_user.id, messange.message_id)
    else:
        await bot.send_message(messange.from_user.id, '', reply_markup=nav.mainMenu)

@dp.message_handler(state=UserState.chgroup)
async def change_gr(message: types.Message, state: FSMContext):
    await state.update_data(group=message.text)
    chgroup = message.text
    print(chgroup)
    us_id = message.from_user.id
    username = message.from_user.username
    if chgroup in grpi:
        s.db_table_ed(grp=chgroup, user_id=us_id)
        await message.answer('–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã ' + chgroup, reply_markup=nav.mainMenu)
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. \n' + '–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.')
        await UserState.chgroup()

async def on_startup():
    user_should_be_notified = 123123123123
    await bot.send_message(user_should_be_notified, '–Ø —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—é, ')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
